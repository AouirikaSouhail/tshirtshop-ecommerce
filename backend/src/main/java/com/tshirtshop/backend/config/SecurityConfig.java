/**ce fichier SecurityConfig.java est une configuration de base qui enregistre un encodeur de mot de passe
 *  avec Spring. Voici une explication d√©taill√©e ligne par ligne :*/

// D√©clare le package dans lequel se trouve la classe SecurityConfig
package com.tshirtshop.backend.config;

/** Ces imports permettent d'utiliser :
 @Configuration ‚Üí pour d√©clarer une classe de configuration Spring.
 @Bean ‚Üí pour enregistrer manuellement un composant (ici, le password encoder).
 BCryptPasswordEncoder ‚Üí la classe de Spring Security qui chiffre les mots de passe avec l‚Äôalgorithme BCrypt.*/
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

// CORS
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

// Utilitaires
import java.util.Arrays;

// JWT filter
import com.tshirtshop.backend.security.JwtAuthenticationFilter;
import org.springframework.http.HttpMethod;

@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
//Cette annotation marque la classe comme une source de configuration Spring. Elle sera analys√©e au d√©marrage.
@Configuration // Dit √† Spring : "Ceci est une classe de configuration"
//D√©claration de la classe de configuration.
// Cette classe configure la s√©curit√© Spring, y compris l‚Äôauthentification, les droits d‚Äôacc√®s, et le support CORS.
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthFilter;

    public SecurityConfig(JwtAuthenticationFilter jwtAuthFilter) {
        this.jwtAuthFilter = jwtAuthFilter;
    }

    //Cette annotation dit √† Spring de cr√©er une instance de retour de la m√©thode suivante (ici, un BCryptPasswordEncoder)
    // et de la rendre disponible partout dans l‚Äôapplication (via injection).
    @Bean // Dit √† Spring : "Cr√©e et g√®re cet objet"
    /**Cette m√©thode cr√©e un encodeur BCrypt utilis√© pour :
     Hacher un mot de passe avant de le sauvegarder.
     Comparer un mot de passe brut avec un mot de passe hash√© stock√© en base.*/
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // Je cr√©e une cha√Æne de s√©curit√© (un ensemble de r√®gles) pour prot√©ger mon site web.
    /**
     * Ce code :
     * Autorise Angular √† parler √† ton backend (CORS).
     * D√©sactive une vieille protection inutile (CSRF).
     * Laisse tout le monde acc√©der √† certaines routes publiques.
     * Bloque tout le reste si on n‚Äôest pas connect√©.
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        // Tu cr√©es ici la logique principale de s√©curit√© : qui peut acc√©der √† quoi ?
        http.cors(Customizer.withDefaults()) // Active la configuration CORS (voir m√©thode suivante)
                .csrf(csrf -> csrf.disable())    // D√©sactive la protection CSRF (inutile pour API REST sans session)
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(HttpMethod.POST, "/api/login").permitAll()
                        .requestMatchers(HttpMethod.POST, "/api/register").permitAll()
                        .requestMatchers(HttpMethod.POST, "/api/stripe/webhook").permitAll()
                        .requestMatchers(HttpMethod.POST, "/api/stripe/create-checkout-session").permitAll() // üÜï Paiement Stripe
                        .requestMatchers(HttpMethod.POST, "/api/test-mail").permitAll() // üÜï test d‚Äôenvoi d‚Äôe-mail
                        .requestMatchers(HttpMethod.GET,  "/categories").permitAll()
                        .requestMatchers(HttpMethod.GET,  "/products/**").permitAll()
                        .requestMatchers(HttpMethod.PUT, "/products/{id}").hasRole("ADMIN")       // üõ°Ô∏è Acc√®s r√©serv√© aux admins
                        .requestMatchers(HttpMethod.DELETE, "/products/{id}").hasRole("ADMIN")    // üõ°Ô∏è Acc√®s r√©serv√© aux admins
                        .requestMatchers(HttpMethod.POST, "/products/category/{categoryId}").hasRole("ADMIN") // üõ°Ô∏è
                        .anyRequest().authenticated() // üîí Tout le reste doit √™tre authentifi√©
                )
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class); // ‚¨ÖÔ∏è Ajout du filtre ici

        return http.build();
    }

    /** AuthenticationManager C‚Äôest le chef d‚Äôorchestre de l‚Äôauthentification chez Spring.
     * Il v√©rifie si l‚Äôe-mail et le mot de passe sont valides.
     @Bean	On le d√©clare comme composant utilisable partout dans l‚Äôapplication.
     AuthenticationConfiguration	C‚Äôest un objet que Spring fournit automatiquement.
     Il sait comment cr√©er un AuthenticationManager en fonction de ta config.*/
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }

    // Filtre CORS pour permettre les appels entre Angular et Spring
    // M√©thode qui cr√©e un filtre CORS pour autoriser les √©changes entre le frontend Angular et le backend Spring Boot
    @Bean
    public CorsFilter corsFilter() {
        // Cr√©ation d'un objet de configuration CORS
        CorsConfiguration config = new CorsConfiguration();
        // Autorise l'envoi de cookies ou d'en-t√™tes d'authentification dans les requ√™tes (ex : token JWT)
        config.setAllowCredentials(true);
        // D√©clare les origines autoris√©es √† appeler ce backend
        config.setAllowedOrigins(Arrays.asList("http://localhost:4200")); // frontend Angular
        // D√©finit les en-t√™tes HTTP autoris√©s dans les requ√™tes envoy√©es au serveur
        config.setAllowedHeaders(Arrays.asList("Origin", "Content-Type", "Accept", "Authorization"));
        // Sp√©cifie les m√©thodes HTTP autoris√©es : GET, POST, PUT, DELETE, OPTIONS
        config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setExposedHeaders(Arrays.asList("Authorization")); // ‚¨ÖÔ∏è pour que le frontend voie le token
        // Enregistre cette configuration pour toutes les routes de l'application (/**)
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        // Retourne un nouveau filtre CORS bas√© sur cette configuration
        return new CorsFilter(source);
    }
}

/** Ce filtre est indispensable si ton frontend (Angular) tourne sur un port (4200) diff√©rent de ton backend (8080),
 *  car le navigateur bloque sinon les requ√™tes dites cross-origin. Ce code
 * l√®ve cette barri√®re de s√©curit√© en toute ma√Ætrise, pour permettre les appels entre tes deux applications en d√©veloppement local.
 */
