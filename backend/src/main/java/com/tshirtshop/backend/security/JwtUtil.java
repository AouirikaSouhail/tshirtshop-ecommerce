// üîê Paquet de s√©curit√©
package com.tshirtshop.backend.security;

// üì¶ Import des classes n√©cessaires de la biblioth√®que jjwt (Java JWT)
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.function.Function;

/**
 *  Cette classe est un outil pour manipuler les tokens JWT.
 * Elle permet :
 * - de g√©n√©rer un token pour un utilisateur,
 * - de lire les informations du token (ex: email),
 * - de v√©rifier si un token est toujours valide.
 */
@Component // Permet √† Spring de g√©rer cette classe automatiquement (bean injectable)
public class JwtUtil {

    //  Cl√© secr√®te pour signer et v√©rifier les tokens. Elle est g√©n√©r√©e automatiquement ici.
    private final Key secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS256); // Utilise l'algorithme HMAC-SHA256

    // Dur√©e de validit√© d‚Äôun token : ici, 10 heures (en millisecondes)
    private final long expirationTime = 10 * 60 * 60 * 1000;

    /**
     *  M√©thode pour cr√©er un token JWT en donnant un email.
     */
    public String generateToken(String email) {
        return Jwts.builder() //  Commence la construction du token
                .setSubject(email) //  Le "sujet" du token (souvent l'identifiant) ‚Üí ici, l‚Äôemail de l‚Äôutilisateur
                .setIssuedAt(new Date()) //  Date de cr√©ation du token
                .setExpiration(new Date(System.currentTimeMillis() + expirationTime)) // Date d‚Äôexpiration
                .signWith(secretKey) // Signature avec la cl√© secr√®te
                .compact(); // Finalise la construction et retourne le token sous forme de String
    }

    /**
     * üì§ Extrait l‚Äôemail (sujet) √† partir d‚Äôun token donn√©
     */
    public String extractEmail(String token) {
        return extractClaim(token, Claims::getSubject); // r√©cup√®re ce qu‚Äôon a mis en setSubject ‚Üí l‚Äôemail
    }

    /**
     * V√©rifie si un token est encore valide pour un email donn√©
     */
    public boolean isTokenValid(String token, String userEmail) {
        String email = extractEmail(token); // extrait l‚Äôemail contenu dans le token
        return (email.equals(userEmail) && !isTokenExpired(token)); //  Compare et v√©rifie l‚Äôexpiration
    }

    /**
     *  V√©rifie si le token a expir√©
     */
    private boolean isTokenExpired(String token) {
        Date expiration = extractClaim(token, Claims::getExpiration); // r√©cup√®re la date d‚Äôexpiration
        return expiration.before(new Date()); // Compare √† la date actuelle
    }

    /**
     * M√©thode g√©n√©rique pour extraire un champ ("claim") sp√©cifique du token (email, date, etc.)
     */
    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        Claims claims = Jwts.parserBuilder() // Pr√©pare le d√©chiffrage du token
                .setSigningKey(secretKey) //  Cl√© utilis√©e pour v√©rifier la signature
                .build() // Construit le parser
                .parseClaimsJws(token) // Analyse le token sign√©
                .getBody(); // R√©cup√®re les donn√©es √† l‚Äôint√©rieur du token
        return claimsResolver.apply(claims); // R√©cup√®re le champ demand√© (email, date, etc.)
    }
}
