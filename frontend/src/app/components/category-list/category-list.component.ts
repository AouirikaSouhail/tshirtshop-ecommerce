/**Component ‚Üí permet de transformer une classe en composant Angular.

OnInit ‚Üí une interface qui oblige √† d√©finir une m√©thode ngOnInit() qui s‚Äôex√©cute automatiquement au d√©marrage du composant. */

import { Component,OnInit } from '@angular/core';

/**On importe le service CategoryService qui contient la m√©thode getCategories() pour aller chercher les donn√©es.
On importe le mod√®le Category, c‚Äôest une interface TypeScript qui d√©crit √† quoi ressemble une cat√©gorie 
(elle a un id, un nom, une image). */
import { CategoryService, Category } from '../../services/category.service';

/**C‚Äôest ce qu‚Äôon appelle un d√©corateur Angular.
Il donne des informations √† Angular sur le composant :
√âl√©ment	R√¥le
selector	Nom de la balise HTML personnalis√©e √† utiliser pour ce composant (<app-category-list>)
templateUrl	Chemin vers le fichier HTML qui affiche les donn√©es
styleUrls	Chemin vers le fichier CSS pour le style visuel */
@Component({
  selector: 'app-category-list',
  templateUrl: './category-list.component.html',
  styleUrls: ['./category-list.component.css']  // ‚Üê ici le "s" √† "styleUrls"
})

/**export ‚Üí permet d‚Äôutiliser cette classe ailleurs dans Angular.
CategoryListComponent ‚Üí c‚Äôest le nom de la classe (elle repr√©sente notre composant).
implements OnInit ‚Üí on dit qu‚Äôon va utiliser la m√©thode ngOnInit() qui sera appel√©e automatiquement au lancement du composant. */
export class CategoryListComponent implements OnInit{

  /**categories est une variable publique (on peut l‚Äôutiliser dans le HTML).
Elle est de type Category[], c‚Äôest-√†-dire un tableau de cat√©gories.
Elle est initialis√©e vide [].üß† On va y stocker les donn√©es re√ßues du backend. */
 categories : Category[] = []; // On cr√©e une variable pour stocker les donn√©es

 /**constructor(...) ‚Üí c‚Äôest une fonction sp√©ciale appel√©e au moment o√π le composant est cr√©√©.
 private categoryService: CategoryService ‚Üí on demande √† Angular d‚Äôinjecter le service automatiquement. */
 //Gr√¢ce √† cela, on pourra √©crire dans cette classe : this.categoryService.getCategories()
 constructor(private categoryService: CategoryService){
   
 }
/**ngOnInit() est une m√©thode sp√©ciale d‚ÄôAngular.
Elle est appel√©e automatiquement quand le composant est affich√© pour la premi√®re fois.
C‚Äôest ici qu‚Äôon met le code d‚Äôinitialisation, comme les appels √† un serveur. */
 ngOnInit(): void {


  /**‚û°Ô∏è C‚Äôest le c≈ìur du composant.
this.categoryService.getCategories() ‚Üí appelle la m√©thode du service qui fait une requ√™te HTTP GET vers ton backend Spring Boot.
.subscribe(...) ‚Üí on s‚Äôabonne √† la r√©ponse. Comme la r√©ponse arrive asynchronement (quelques millisecondes plus tard), on dit √† Angular :
Quand les donn√©es sont pr√™tes, fais ce qu‚Äôil y a dans les { ... }.
 data => { this.categories = data; } :
 data contient la liste des cat√©gories (venue du backend).
this.categories = data; ‚Üí on les stocke dans notre variable pour pouvoir les afficher dans le HTML. */

     this.categoryService.getCategories().subscribe(data =>{
      this.categories = data;
      console.log(this.categories);
     });
 }
}
