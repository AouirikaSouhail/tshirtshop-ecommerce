// Ce fichier est un contr√¥leur (controller) qui permet de g√©rer les routes li√©es aux produits
package com.tshirtshop.backend.controller;

// On importe les classes n√©cessaires
import com.tshirtshop.backend.dto.ProductDetails;
import com.tshirtshop.backend.model.Product;
import com.tshirtshop.backend.model.Category;
import com.tshirtshop.backend.model.Stock;
import com.tshirtshop.backend.repository.ProductRepository;
import com.tshirtshop.backend.repository.CategoryRepository;
import com.tshirtshop.backend.repository.StockRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;

//// Cette annotation indique que ce fichier est un "REST Controller", c‚Äôest-√†-dire qu‚Äôil va g√©rer les requ√™tes HTTP (comme GET, POST‚Ä¶).
@RestController

// // Toutes les routes dans ce fichier commenceront par /products dans l‚ÄôURL
@RequestMapping("/products")
@CrossOrigin(origins = "http://localhost:4200") // ‚¨ÖÔ∏è Autorise Angular √† acc√©der au backend
public class ProductController {

    @Autowired // Permet au controller un acc√®s a la BDD
    // On injecte automatiquement l‚Äôobjet productRepository (acc√®s √† la base de donn√©es des produits)
    private ProductRepository productRepository;

    @Autowired
    // On injecte automatiquement l‚Äôobjet categoryRepository (acc√®s √† la base de donn√©es des cat√©gories)
    private CategoryRepository categoryRepository;
    @Autowired
    // On injecte automatiquement l‚Äôobjet stockRepository (acc√®s √† la base de donn√©es des stocks)
    private StockRepository stockRepository;
    // Route GET : /products/by-category/{categoryId}
    // Elle permet d‚Äôafficher les produits d‚Äôune cat√©gorie sp√©cifique
    @GetMapping("/by-category/{categoryId}")
    public List<Product> findByCategory(@PathVariable Long categoryId){
        Optional<Category> optionalCategory = categoryRepository.findById(categoryId);

        if(optionalCategory.isPresent()){
            // Si la cat√©gorie existe, on r√©cup√®re l‚Äôobjet category
            Category category = optionalCategory.get();
            // Puis on cherche tous les produits li√©s √† cette cat√©gorie
            return productRepository.findByCategory(category);
        }
        else{
            // Si la cat√©gorie n‚Äôexiste pas (id incorrect), on renvoie une liste vide
            return List.of();
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<ProductDetails> findById(@PathVariable Long id) {
        Optional<Product> optionalProduct = productRepository.findById(id);

        if (optionalProduct.isPresent()) {
            Product product = optionalProduct.get();

            // On va chercher le stock du produit
            // var stock est possible depuis java 10 le compilateur peut reconnaitre automatiquement le type
            Stock stock = stockRepository.findByProduitId(product.getId());

            // ‚ú® On pr√©pare le DTO avec toutes les infos, y compris le stock
            ProductDetails dto = new ProductDetails();
            dto.setId(product.getId());
            dto.setName(product.getName());
            dto.setBrand(product.getBrand());
            dto.setPrice(product.getPrice());
            dto.setImageUrl(product.getImageUrl());
            dto.setDescription(product.getDescription());
            dto.setCategoryName(product.getCategory().getName());
            dto.setQuantiteStock(stock != null ? stock.getQuantiteDisponible() : 0); // ‚úÖ

            return ResponseEntity.ok(dto); // ‚úÖ On renvoie le DTO
        }

        return ResponseEntity.notFound().build();
    }


    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Product> updateProduct(@PathVariable Long id,@RequestBody Product updatedProduct){
        //On cherche dans la base de donn√©es si un produit avec l‚ÄôID donn√© existe.
        Optional<Product> existingProduct = productRepository.findById(id);
        if(existingProduct.isPresent()){
            Product product = existingProduct.get();
            //Ces lignes mettent √† jour le produit :
            // On prend les nouvelles valeurs que le frontend a envoy√©es et on les copie dans le produit existant.
            product.setName(updatedProduct.getName());
            product.setPrice(updatedProduct.getPrice());
            product.setDescription(updatedProduct.getDescription());
            product.setImageUrl(updatedProduct.getImageUrl());
            //On sauvegarde le produit modifi√© dans la base de donn√©es.
            productRepository.save(product);
            // On renvoie une r√©ponse HTTP 200 (OK) avec le produit modifi√©.
            return ResponseEntity.ok(product);

        }
        //Sinon (produit pas trouv√©)
        //Si aucun produit n‚Äôexiste avec cet ID, on renvoie une r√©ponse HTTP 404 (Not Found).
        return ResponseEntity.notFound().build();

        /**R√©sum√© simple :
         √âtape	Ce que fait ton code
         1Ô∏è‚É£	Re√ßoit un ID + un produit mis √† jour
         2Ô∏è‚É£	Cherche si le produit existe
         3Ô∏è‚É£	S‚Äôil existe ‚Üí met √† jour les champs et enregistre
         4Ô∏è‚É£	Sinon ‚Üí renvoie une erreur 404*/
    }
    //Ajouter un produit
    @PostMapping("/category/{categoryId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> addProductToCategory(
            @PathVariable Long categoryId,
            @RequestBody Product newProduct) {

        Optional<Category> categoryOptional = categoryRepository.findById(categoryId);
        if (categoryOptional.isPresent()) {
            newProduct.setCategory(categoryOptional.get());
            Product savedProduct = productRepository.save(newProduct);
            return ResponseEntity.status(HttpStatus.CREATED).body(savedProduct);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("Cat√©gorie avec ID " + categoryId + " non trouv√©e.");
        }
        /**
         * @PostMapping("/products") = Re√ßoit une requ√™te POST (ajout) √† l'URL /products
         @RequestBody Product newProduct = R√©cup√®re les donn√©es du nouveau produit envoy√©es par le frontend (en JSON)
         productRepository.save(newProduct) = Enregistre le produit en base de donn√©es
         ResponseEntity.status(HttpStatus.CREATED).body(...) = Retourne le produit avec le code 201 Created
         pour indiquer que tout s‚Äôest bien pass√©.*/
    }



    //Supprimer un produit (@DeleteMapping)
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
        Optional<Product> product = productRepository.findById(id);

        if (product.isPresent()) {
            productRepository.deleteById(id); // üóëÔ∏è Supprime le produit avec cet ID
            return ResponseEntity.noContent().build(); // ‚úÖ R√©ponse 204 : succ√®s mais pas de contenu √† renvoyer
        } else {
            return ResponseEntity.notFound().build(); // ‚ùå Produit non trouv√© ‚Üí erreur 404
        }
        /**@DeleteMapping("/products/{id}") = Re√ßoit une requ√™te DELETE pour un produit avec un ID sp√©cifique

         @PathVariable Long id = R√©cup√®re l'ID dans l'URL

         productRepository.findById(id) = V√©rifie si le produit existe

         deleteById(id) = Supprime le produit s‚Äôil existe

         noContent() = Retourne 204 (succ√®s sans message)

         notFound() = Retourne 404 si l‚ÄôID n‚Äôexiste pas */
    }


}
